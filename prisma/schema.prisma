generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String     @id @default(uuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  fullName    String
  email       String     @unique
  image       String?    @default("")
  phoneNumber String?    @unique
  password    String
  adminId     String?
  isAdmin     Boolean    @default(false)
  step        String?
  isBanned    Boolean    @default(false)
  position    String?
  status      UserStatus @default(pending)
  token       String?
  Comment     Comment[]
  Location    Location[]
  Task        Task[]
}

model Task {
  id            String    @id @default(uuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  index         BigInt
  title         String
  description   String
  status        String
  taskLocation  String
  startLocation String
  endLocation   String
  distance      String
  from          String
  to            String
  deadline      DateTime
  taskRadius    BigInt
  userId        String
  startTime     DateTime
  endTime       DateTime
  duration      DateTime
  pauseTime     DateTime
  isCompleted   Boolean
  isStarted     Boolean
  isRunning     Boolean
  isPaused      Boolean
  isCanceled    Boolean
  isArchived    Boolean
  isDeleted     Boolean
  date          DateTime
  Comment       Comment[]
  user          User      @relation(fields: [userId], references: [id])
}

model Comment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  text      String
  taskId    String
  userId    String
  date      DateTime
  task      Task     @relation(fields: [taskId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Location {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  latitude  Float
  longitude Float
  address   String
  city      String
  state     String
  zip       String
  country   String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model ExInfo {
  id        String   @id @default(uuid())
  usage     String?
  role      String?
  membersT  String?
  membersC  String?
  hear      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BlackTokenList {
  id    String @id @default(uuid())
  token String
}

enum UserStatus {
  pending
  verified
  banned
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  pending
  verified
  banned
}

model Employee {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  fullName    String
  image       String
  phoneNumber String   @unique
  password    String
  isAdmin     Boolean
  email       String   @unique
  User        User[]
}

model User {
  id          String     @id @default(uuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  fullName    String
  email       String     @unique
  image       String?    @default("")
  phoneNumber String?    @unique
  password    String
  employee    Employee   @relation(fields: [employeeId], references: [id])
  employeeId  String     @default("")
  adminId     String     @default("")
  isAdmin     Boolean    @default(false)
  step        String     @default("")
  isBanned    Boolean    @default(false)
  position    String     @default("")
  status      UserStatus @default(pending)
  Task        Task[]
  Comment     Comment[]
  Location    Location[]
}

model Task {
  id            String    @id @default(uuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  index         BigInt
  title         String
  description   String
  status        String
  taskLocation  String
  startLocation String
  endLocation   String
  distance      String
  from          String
  to            String
  deadline      DateTime
  taskRadius    BigInt
  user          User      @relation(fields: [userId], references: [id])
  userId        String
  startTime     DateTime
  endTime       DateTime
  duration      DateTime
  pauseTime     DateTime
  isCompleted   Boolean
  isStarted     Boolean
  isRunning     Boolean
  isPaused      Boolean
  isCanceled    Boolean
  isArchived    Boolean
  isDeleted     Boolean
  date          DateTime
  Comment       Comment[]
}

model Comment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  text      String
  task      Task     @relation(fields: [taskId], references: [id])
  taskId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  date      DateTime
}

model Location {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  latitude  Float
  longitude Float
  address   String
  city      String
  state     String
  zip       String
  country   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}
